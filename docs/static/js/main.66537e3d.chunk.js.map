{"version":3,"sources":["MetaElement.js","CheckListItemElement.js","App.js","serviceWorker.js","index.js"],"names":["Meta","props","console","log","CheckListItemElement","attributes","children","element","editor","useEditor","readOnly","useReadOnly","checked","className","css","contentEditable","type","onChange","event","path","ReactEditor","findPath","Editor","setNodes","target","at","suppressContentEditableWarning","CodeElement","DefaultElement","Leaf","leaf","bold","italic","underlined","CustomEditor","isBoldMarkActive","nodes","match","mode","isCodeBlockActive","isItalicMarkActive","isUnderlineMarkActive","App","useMemo","exec","command","selection","isActive","split","insertNodes","text","Range","isCollapsed","start","Point","equals","anchor","withCustom","withHistory","withReact","createEditor","useState","setSelection","value","setValue","renderElement","useCallback","MetaElement","renderLeaf","onMouseDown","preventDefault","onKeyDown","ctrlKey","key","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66537e3d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Meta = props => {\n  console.log('meta', props)\n  return (\n    <div>\n      props\n    </div>\n  )\n}\n\nexport default Meta\n","import React from 'react';\nimport { useReadOnly, useEditor, ReactEditor } from 'slate-react'\nimport { Editor } from 'slate'\nimport { css } from 'emotion'\n\nconst CheckListItemElement = ({ attributes, children, element }) => {\n  console.log('commming here')\n  const editor = useEditor()\n  const readOnly = useReadOnly()\n  const { checked } = element\n  return (\n    <div\n      {...attributes}\n      className={css`\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        & + & {\n          margin-top: 0;\n        }\n      `}\n    >\n      <span\n        contentEditable={false}\n        className={css`\n          margin-right: 0.75em;\n        `}\n      >\n        <input\n          type=\"checkbox\"\n          checked={checked}\n          onChange={event => {\n            const path = ReactEditor.findPath(editor, element)\n            Editor.setNodes(\n              editor,\n              { checked: event.target.checked },\n              { at: path }\n            )\n          }}\n        />\n      </span>\n      <span\n        contentEditable={!readOnly}\n        suppressContentEditableWarning\n        className={css`\n          flex: 1;\n          opacity: ${checked ? 0.666 : 1};\n          text-decoration: ${checked ? 'none' : 'line-through'};\n          &:focus {\n            outline: none;\n          }\n        `}\n      >\n        {children}\n      </span>\n    </div>\n  )\n}\n\nexport default CheckListItemElement\n","import React, { useMemo, useState, useCallback } from 'react';\n// Import the Slate editor factory.\nimport { createEditor, Editor, Range, Point } from 'slate'\n\n// Import the Slate components and React plugin.\nimport { Slate, Editable, withReact } from 'slate-react'\nimport { withHistory } from 'slate-history'\nimport MetaElement from './MetaElement'\nimport CheckListItemElement from './CheckListItemElement'\n\nconst CodeElement = props => {\n  return (\n    <pre {...props.attributes}>\n      <code>{props.children}</code>\n    </pre>\n  )\n}\n\nconst DefaultElement = props => {\n  return <p {...props.attributes}>{props.children}</p>\n}\n\n// Define a React component to render leaves with bold text.\nconst Leaf = ({ attributes, children, leaf }) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underlined) {\n    children = <u>{children}</u>\n  }\n\n  return <span {...attributes}>{children}</span>\n}\n\n\nconst withCustom = editor => {\n  const { exec } = editor\n\n  editor.exec = command => {\n    const { selection } = editor\n    // Define a command to toggle the bold  formatting.\n    if (command.type === 'toggle_bold_mark') {\n      const isActive = CustomEditor.isBoldMarkActive(editor)\n      Editor.setNodes(\n        editor,\n        { bold: isActive ? null : true },\n        { match: 'text', split: true }\n      )\n    }\n\n    // Define a command to toggle the bold  formatting.\n    else if (command.type === 'toggle_italic_mark') {\n      const isActive = CustomEditor.isItalicMarkActive(editor)\n      Editor.setNodes(\n        editor,\n        { italic: isActive ? null : true },\n        { match: 'text', split: true }\n      )\n    }\n\n    else if (command.type === 'toggle_underline_mark') {\n      const isActive = CustomEditor.isUnderlineMarkActive(editor)\n      Editor.setNodes(\n        editor,\n        { underlined: isActive ? null : true },\n        { match: 'text', split: true }\n      )\n    }\n\n\n    // Define a command to toggle the code block formatting.\n    else if (command.type === 'toggle_code_block') {\n      const isActive = CustomEditor.isCodeBlockActive(editor)\n      Editor.setNodes(\n        editor,\n        { type: isActive ? null : 'code' },\n        { match: 'block' }\n      )\n    }\n\n    else if (command.type === 'toggle_checklist_block') {\n      Editor.insertNodes(\n        editor,\n        {\n          type: 'check-list-item',\n          checked: false,\n          children: [{ text: '' }]\n        }\n      )\n    }\n\n\n    else if (command.type === 'toggle_meta_block') {\n      const meta = { type: 'meta' }\n      Editor.insertNodes(editor, meta)\n    }\n\n    else if (\n      command.type === 'delete_backward' &&\n      selection &&\n      Range.isCollapsed(selection)\n    ) {\n      const [match] = Editor.nodes(editor, {\n        match: { type: 'check-list-item' },\n      })\n\n      if (match) {\n        const [, path] = match\n        const start = Editor.start(editor, path)\n\n        if (Point.equals(selection.anchor, start)) {\n          Editor.setNodes(\n            editor,\n            { type: 'paragraph' },\n            { match: { type: 'check-list-item' } }\n          )\n          return\n        }\n      }\n    }\n\n    // Otherwise, fall back to the built-in `exec` logic for everything else.\n    else {\n      exec(command)\n    }\n  }\n\n  return editor\n}\n\n// Define our own custom set of helpers for active-checking queries.\nconst CustomEditor = {\n  isBoldMarkActive(editor) {\n    const [match] = Editor.nodes(editor, {\n      match: { bold: true },\n      mode: 'all',\n    })\n\n    return !!match\n  },\n\n  isCodeBlockActive(editor) {\n    const [match] = Editor.nodes(editor, {\n      match: { type: 'code' },\n      mode: 'highest',\n    })\n\n    return !!match\n  },\n\n  isItalicMarkActive(editor) {\n    const [match] = Editor.nodes(editor, {\n      match: { italic: true },\n      mode: 'all'\n    })\n\n    return !!match\n  },\n\n  isUnderlineMarkActive(editor) {\n    const [match] = Editor.nodes(editor, {\n      match: { underlined: true },\n      mode: 'all'\n    })\n\n    return !!match\n  }\n}\n\nconst App = () => {\n  const editor = useMemo(\n    () => withCustom(withHistory(withReact(createEditor()))),\n    []\n  )\n  const [selection, setSelection] = useState(null)\n  const [value, setValue] = useState([\n    {\n      type: 'paragraph',\n      children: [{ text: 'A line of text in a paragraph.' }],\n    },\n  ])\n\n  const renderElement = useCallback(props => {\n    console.log(props.element.type)\n    switch (props.element.type) {\n      case 'code':\n        return <CodeElement {...props} />\n      case 'meta':\n        return <MetaElement {...props} />\n      case 'check-list-item':\n       return <CheckListItemElement {...props} />\n      default:\n        return <DefaultElement {...props} />\n    }\n  }, [])\n\n  const renderLeaf = useCallback(props => {\n    return <Leaf {...props} />\n  }, [])\n\n  return (\n    <Slate\n      editor={editor}\n      value={value}\n      selection={selection}\n      onChange={(value, selection) => {\n        setValue(value)\n        setSelection(selection)\n        console.log(value)\n      }}\n    >\n      <div>\n        <button\n          onMouseDown={event => {\n            event.preventDefault()\n            editor.exec({ type: 'toggle_bold_mark' })\n          }}\n        >\n          Bold\n        </button>\n        <button\n          onMouseDown={event => {\n            event.preventDefault()\n            editor.exec({ type: 'toggle_code_block' })\n          }}\n        >\n          Code Block\n        </button>\n        <button\n          onMouseDown={event => {\n            event.preventDefault()\n            editor.exec({ type: 'toggle_italic_mark' })\n          }}\n        >\n          Italic\n        </button>\n        <button\n          onMouseDown={event => {\n            event.preventDefault()\n            editor.exec({ type: 'toggle_underline_mark' })\n          }}\n        >\n          underline\n        </button>\n        <button\n          onMouseDown={event => {\n            event.preventDefault()\n            editor.exec({ type: 'toggle_checklist_block' })\n          }}\n        >\n          check list\n        </button>\n      </div>\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        onKeyDown={event => {\n          if (!event.ctrlKey) {\n            return\n          }\n\n          // Replace the `onKeyDown` logic with our new commands.\n          switch (event.key) {\n            case '`': {\n              event.preventDefault()\n              editor.exec({ type: 'toggle_code_block' })\n              break\n            }\n\n            case 'b': {\n              event.preventDefault()\n              editor.exec({ type: 'toggle_bold_mark' })\n              break\n            }\n            default:\n          }\n        }}\n      />\n    </Slate>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}